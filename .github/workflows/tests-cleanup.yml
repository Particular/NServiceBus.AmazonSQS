name: SQS Transport Cleanup
on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch:
jobs:
  cleanup:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2.4.0
    - name: Run cleanup
      env:
        LIMITED_DELETE_RIGHTS_ACCOUNT_KEY: ${{ secrets.CLEANUP_AWS_ACCESS_KEY_ID }}
        LIMITED_DELETE_RIGHTS_ACCOUNT_SECRET_KEY: ${{ secrets.CLEANUP_AWS_SECRET_ACCESS_KEY }}
      shell: pwsh
      run: |
        $limitedDeleteRightsAccessKey = $env:LIMITED_DELETE_RIGHTS_ACCOUNT_KEY
        $limitedDeleteRightsSecretKey = $env:LIMITED_DELETE_RIGHTS_ACCOUNT_SECRET_KEY

        if (!(Get-Module AWSPowerShell.NetCore)) {
            Write-Host "Installing AWSPowerShell.NetCore..."
            Install-Module -name AWSPowerShell.NetCore -Scope CurrentUser -Force -AllowClobber
        }

        Write-Host "Importing module..."
        Import-Module AWSPowerShell.NetCore -Force

        Write-Host "The following version of AWSPowerShell.NetCore is being used"
        Get-AWSPowerShellVersion

        $dateFilter = ([System.DateTime]::UtcNow).AddHours(-24)
        $nameFilter = "cli-*"

        Write-Host "Current time"  ([System.DateTime]::UtcNow).ToString() UTC
        Write-Host "Looking for test buckets older than" $dateFilter.ToString() UTC "with the the following name pattern" $nameFilter

        $buckets = Get-S3Bucket -AccessKey $limitedDeleteRightsAccessKey -SecretKey $limitedDeleteRightsSecretKey
                    | Where-Object {
                        ($dateFilter -gt $_.CreationDate.ToUniversalTime()) -and ($_.BucketName -like $nameFilter)
                    }

        if ($buckets.count -gt 0) {
            Write-Host "Attempting to delete the following buckets..."
            $buckets | ForEach-Object {
                            'Name: {0} - CreatedUTC: {1}' -f $_.BucketName, $_.CreationDate.ToUniversalTime()
                        }
            try {
                $buckets | ForEach-Object {
                    Remove-S3Bucket -AccessKey $limitedDeleteRightsAccessKey -SecretKey $limitedDeleteRightsSecretKey $_.BucketName -Force
                }
                Write-Host "Buckets deleted!"
            }
            catch {
                "The following error occurred while trying to delete the buckets:"
                throw $_
            }
        }
        else {
            Write-Host "0 bucket(s) found to be deleted"
        }
    - name: Notify Slack on failure
      if: ${{ failure() }}
      shell: pwsh
      run: |
          $headers = @{
              'Authorization' = "Bearer ${{ secrets.SLACK_TOKEN }}"
          }
          $body = @{
            channel = 'aws'
            text = "NServiceBus.AmazonSQS clean up has failed: https://github.com/Particular/NServiceBus.AmazonSQS/actions/workflows/tests-cleanup.yml"
            username = 'Amazon SQS Transport Test Cleanup'
            icon_emoji = 'github_actions'
            unfurl_links = false
            unfurl_media = false
          } | ConvertTo-Json
          $result = Invoke-RestMethod -Method POST -Uri https://slack.com/api/chat.postMessage -ContentType "application/json; charset=utf-8" -Headers $headers -Body $body
          Write-Output $result
          exit $(If ($result.ok) { 0 } Else { 1 })
