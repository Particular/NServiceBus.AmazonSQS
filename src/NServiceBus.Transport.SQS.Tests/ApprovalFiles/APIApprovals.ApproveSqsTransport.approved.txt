[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SQS.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SQS.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SQS.TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SQS.TransportTests.DoNotWrapOutgoingMessages, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public static class MessageDrivenPubSubCompatibilityModeConfiguration
    {
        public static NServiceBus.Transport.SQS.Configure.SqsSubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.RoutingSettings routingSettings) { }
        public static NServiceBus.Transport.SQS.Configure.SqsSubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
    }
    public class PolicySettings
    {
        public PolicySettings() { }
        public bool AccountCondition { get; set; }
        public bool SetupTopicPoliciesWhenSubscribing { get; set; }
        public bool TopicNamePrefixCondition { get; set; }
        public System.Collections.Generic.List<string> TopicNamespaceConditions { get; }
    }
    public abstract class S3EncryptionMethod
    {
        protected S3EncryptionMethod() { }
        protected abstract void ModifyGetRequest(Amazon.S3.Model.GetObjectRequest get);
        protected abstract void ModifyPutRequest(Amazon.S3.Model.PutObjectRequest put);
    }
    public sealed class S3EncryptionWithCustomerProvidedKey : NServiceBus.S3EncryptionMethod
    {
        public S3EncryptionWithCustomerProvidedKey(Amazon.S3.ServerSideEncryptionCustomerMethod method, string key, string keyMd5 = null) { }
        public string Key { get; }
        public string KeyMD5 { get; }
        public Amazon.S3.ServerSideEncryptionCustomerMethod Method { get; }
        protected override void ModifyGetRequest(Amazon.S3.Model.GetObjectRequest get) { }
        protected override void ModifyPutRequest(Amazon.S3.Model.PutObjectRequest put) { }
    }
    public sealed class S3EncryptionWithManagedKey : NServiceBus.S3EncryptionMethod
    {
        public S3EncryptionWithManagedKey(Amazon.S3.ServerSideEncryptionMethod method, string keyId = null) { }
        public string KeyId { get; }
        public Amazon.S3.ServerSideEncryptionMethod Method { get; }
        protected override void ModifyGetRequest(Amazon.S3.Model.GetObjectRequest get) { }
        protected override void ModifyPutRequest(Amazon.S3.Model.PutObjectRequest put) { }
    }
    public class S3Settings
    {
        public S3Settings(string bucketForLargeMessages, string keyPrefix, Amazon.S3.IAmazonS3 s3Client = null) { }
        public string BucketName { get; }
        public bool? DisablePayloadSigning { get; set; }
        public NServiceBus.S3EncryptionMethod Encryption { get; set; }
        public string KeyPrefix { get; }
        public Amazon.S3.IAmazonS3 S3Client { get; }
    }
    public class SqsTransport : NServiceBus.Transport.TransportDefinition
    {
        public SqsTransport(bool disableUnrestrictedDelayedDelivery = false) { }
        public SqsTransport(Amazon.SQS.IAmazonSQS sqsClient, Amazon.SimpleNotificationService.IAmazonSimpleNotificationService snsClient, bool disableUnrestrictedDelayedDelivery = false) { }
        public bool DoNotWrapOutgoingMessages { get; set; }
        public System.TimeSpan MaxAutoMessageVisibilityRenewalDuration { get; set; }
        public System.TimeSpan MaxTimeToLive { get; set; }
        public System.TimeSpan? MessageVisibilityTimeout { get; set; }
        public NServiceBus.PolicySettings Policies { get; }
        public System.Func<string, string, string> QueueNameGenerator { get; set; }
        public string QueueNamePrefix { get; set; }
        public long ReserveBytesInMessageSizeCalculation { get; set; }
        public NServiceBus.S3Settings S3 { get; set; }
        public Amazon.SimpleNotificationService.IAmazonSimpleNotificationService SnsClient { get; }
        public Amazon.SQS.IAmazonSQS SqsClient { get; }
        public System.Func<System.Type, string, string> TopicNameGenerator { get; set; }
        public string TopicNamePrefix { get; set; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
        public void MapEvent(System.Type eventType, string customTopicName) { }
        public void MapEvent(System.Type subscribedEventType, System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public void MapEvent(System.Type subscribedEventType, System.Type publishedEventType) { }
        public void MapEvent<TSubscribedEvent>(System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public void MapEvent<TSubscribedEvent>(string customTopicName) { }
        public void MapEvent<TSubscribedEvent, TPublishedEvent>() { }
    }
    public static class SqsTransportSettings
    {
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> ClientFactory(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<Amazon.SQS.IAmazonSQS> factory) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> ClientFactory(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<Amazon.SimpleNotificationService.IAmazonSimpleNotificationService> factory) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> DoNotWrapOutgoingMessages(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static void MapEvent(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Type eventType, string customTopicName) { }
        public static void MapEvent(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Type subscribedEventType, System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public static void MapEvent(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Type subscribedEventType, System.Type publishedEventType) { }
        public static void MapEvent<TSubscribedEvent>(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public static void MapEvent<TSubscribedEvent>(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string customTopicName) { }
        public static void MapEvent<TSubscribedEvent, TPublishedEvent>(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> MaxAutoMessageVisibilityRenewalDuration(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.TimeSpan duration) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> MaxTimeToLive(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.TimeSpan maxTimeToLive) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> MessageVisibilityTimeout(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.TimeSpan visibilityTimeout) { }
        public static NServiceBus.PolicySettings Policies(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> QueueNamePrefix(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string queueNamePrefix) { }
        public static NServiceBus.S3Settings S3(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string bucketForLargeMessages, string keyPrefix) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> TopicNameGenerator(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<System.Type, string, string> topicNameGenerator) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> TopicNamePrefix(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string topicNamePrefix) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config)
            where T : NServiceBus.SqsTransport { }
    }
}
namespace NServiceBus.Transport.SQS.Configure
{
    public class SqsSubscriptionMigrationModeSettings : NServiceBus.SubscriptionMigrationModeSettings
    {
        [System.Obsolete("Use the SqsTransport.MessageVisibilityTimeout property instead. Will be removed i" +
            "n version 9.0.0.", true)]
        public NServiceBus.SubscriptionMigrationModeSettings MessageVisibilityTimeout(int timeoutInSeconds) { }
        public NServiceBus.SubscriptionMigrationModeSettings SubscriptionsCacheTTL(System.TimeSpan ttl) { }
        public NServiceBus.Transport.SQS.Configure.SqsSubscriptionMigrationModeSettings TopicCacheTTL(System.TimeSpan ttl) { }
    }
}