[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SQS.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SQS.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SQS.TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public static class MessageDrivenPubSubCompatibilityModeConfiguration
    {
        public static NServiceBus.Transport.SQS.Configure.SqsSubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.RoutingSettings routingSettings) { }
        public static NServiceBus.Transport.SQS.Configure.SqsSubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
    }
    public class PolicySettings
    {
        public PolicySettings() { }
        public bool AccountCondition { get; set; }
        public bool SetupTopicPoliciesWhenSubscribing { get; set; }
        public bool TopicNamePrefixCondition { get; set; }
        public System.Collections.Generic.List<string> TopicNamespaceConditions { get; }
        [System.Obsolete("Use `AccountCondition` instead. Will be treated as an error from version 7.0.0. W" +
            "ill be removed in version 8.0.0.", false)]
        public void AddAccountCondition() { }
        [System.Obsolete("Use `TopicNamespaceConditions` instead. Will be treated as an error from version " +
            "7.0.0. Will be removed in version 8.0.0.", false)]
        public void AddNamespaceCondition(string topicNamespace) { }
        [System.Obsolete("Use `TopicNamePrefixCondition` instead. Will be treated as an error from version " +
            "7.0.0. Will be removed in version 8.0.0.", false)]
        public void AddTopicNamePrefixCondition() { }
        [System.Obsolete("Use `SetupTopicPoliciesWhenSubscribing` instead. Will be treated as an error from" +
            " version 7.0.0. Will be removed in version 8.0.0.", false)]
        public void AssumePolicyHasAppropriatePermissions() { }
    }
    public abstract class S3EncryptionMethod
    {
        protected S3EncryptionMethod() { }
        protected abstract void ModifyGetRequest(Amazon.S3.Model.GetObjectRequest get);
        protected abstract void ModifyPutRequest(Amazon.S3.Model.PutObjectRequest put);
    }
    public sealed class S3EncryptionWithCustomerProvidedKey : NServiceBus.S3EncryptionMethod
    {
        public S3EncryptionWithCustomerProvidedKey(Amazon.S3.ServerSideEncryptionCustomerMethod method, string key, string keyMd5 = null) { }
        public string Key { get; }
        public string KeyMD5 { get; }
        public Amazon.S3.ServerSideEncryptionCustomerMethod Method { get; }
        protected override void ModifyGetRequest(Amazon.S3.Model.GetObjectRequest get) { }
        protected override void ModifyPutRequest(Amazon.S3.Model.PutObjectRequest put) { }
    }
    public sealed class S3EncryptionWithManagedKey : NServiceBus.S3EncryptionMethod
    {
        public S3EncryptionWithManagedKey(Amazon.S3.ServerSideEncryptionMethod method, string keyId = null) { }
        public string KeyId { get; }
        public Amazon.S3.ServerSideEncryptionMethod Method { get; }
        protected override void ModifyGetRequest(Amazon.S3.Model.GetObjectRequest get) { }
        protected override void ModifyPutRequest(Amazon.S3.Model.PutObjectRequest put) { }
    }
    public class S3Settings
    {
        public S3Settings(string bucketForLargeMessages, string keyPrefix, Amazon.S3.IAmazonS3 s3Client = null) { }
        public string BucketName { get; }
        public NServiceBus.S3EncryptionMethod Encryption { get; set; }
        public string KeyPrefix { get; }
        public Amazon.S3.IAmazonS3 S3Client { get; }
        [System.Obsolete("Use `Client or S3Settings constructor` instead. Will be treated as an error from " +
            "version 7.0.0. Will be removed in version 8.0.0.", false)]
        public void ClientFactory(System.Func<Amazon.S3.IAmazonS3> factory) { }
        [System.Obsolete("Use `Encryption` instead. Will be treated as an error from version 7.0.0. Will be" +
            " removed in version 8.0.0.", false)]
        public void ServerSideCustomerEncryption(Amazon.S3.ServerSideEncryptionCustomerMethod encryptionMethod, string providedKey, string providedKeyMD5 = null) { }
        [System.Obsolete("Use `Encryption` instead. Will be treated as an error from version 7.0.0. Will be" +
            " removed in version 8.0.0.", false)]
        public void ServerSideEncryption(Amazon.S3.ServerSideEncryptionMethod encryptionMethod, string keyManagementServiceKeyId = null) { }
    }
    public class SqsTransport : NServiceBus.Transport.TransportDefinition
    {
        public SqsTransport() { }
        public SqsTransport(Amazon.SQS.IAmazonSQS sqsClient, Amazon.SimpleNotificationService.IAmazonSimpleNotificationService snsClient) { }
        public bool DoNotBase64EncodeOutgoingMessages { get; set; }
        [System.Obsolete("Configures the SQS transport to be compatible with 1.x versions of the transport." +
            " Will be treated as an error from version 7.0.0. Will be removed in version 8.0." +
            "0.", false)]
        public bool EnableV1CompatibilityMode { get; set; }
        public System.TimeSpan MaxTimeToLive { get; set; }
        public NServiceBus.PolicySettings Policies { get; }
        public System.Func<string, string, string> QueueNameGenerator { get; set; }
        public string QueueNamePrefix { get; set; }
        public NServiceBus.S3Settings S3 { get; set; }
        public Amazon.SimpleNotificationService.IAmazonSimpleNotificationService SnsClient { get; }
        public Amazon.SQS.IAmazonSQS SqsClient { get; }
        public System.Func<System.Type, string, string> TopicNameGenerator { get; set; }
        public string TopicNamePrefix { get; set; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
        public void MapEvent(System.Type eventType, string customTopicName) { }
        public void MapEvent(System.Type subscribedEventType, System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public void MapEvent(System.Type subscribedEventType, System.Type publishedEventType) { }
        public void MapEvent<TSubscribedEvent>(System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public void MapEvent<TSubscribedEvent>(string customTopicName) { }
        public void MapEvent<TSubscribedEvent, TPublishedEvent>() { }
        [System.Obsolete("Inject the ITransportAddressResolver type to access the address translation mecha" +
            "nism at runtime. See the NServiceBus version 8 upgrade guide for further details" +
            ". Will be treated as an error from version 7.0.0. Will be removed in version 8.0" +
            ".0.", false)]
        public override string ToTransportAddress(NServiceBus.Transport.QueueAddress address) { }
    }
    public static class SqsTransportSettings
    {
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> ClientFactory(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<Amazon.SQS.IAmazonSQS> factory) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> ClientFactory(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<Amazon.SimpleNotificationService.IAmazonSimpleNotificationService> factory) { }
        [System.Obsolete("The SQS transport does not support a connection string. The member currently thro" +
            "ws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transport, System.Func<string> connectionString) { }
        [System.Obsolete("The SQS transport does not support a connection string. The member currently thro" +
            "ws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transport, string connectionString) { }
        [System.Obsolete("The native delayed delivery is always enabled in version 6. The member currently " +
            "throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static void DisablePublishing(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> DoNotBase64EncodeOutgoingMessages(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        [System.Obsolete("The compatibility mode is deprecated. Switch to native publish/subscribe mode usi" +
            "ng SNS instead. The member currently throws a NotImplementedException. Will be r" +
            "emoved in version 7.0.0.", true)]
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        [System.Obsolete("Configures the SQS transport to be compatible with 1.x versions of the transport." +
            " Will be treated as an error from version 7.0.0. Will be removed in version 8.0." +
            "0.", false)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> EnableV1CompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static void MapEvent(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Type eventType, string customTopicName) { }
        public static void MapEvent(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Type subscribedEventType, System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public static void MapEvent(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Type subscribedEventType, System.Type publishedEventType) { }
        public static void MapEvent<TSubscribedEvent>(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Collections.Generic.IEnumerable<string> customTopicsNames) { }
        public static void MapEvent<TSubscribedEvent>(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string customTopicName) { }
        public static void MapEvent<TSubscribedEvent, TPublishedEvent>(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> MaxTimeToLive(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.TimeSpan maxTimeToLive) { }
        public static NServiceBus.PolicySettings Policies(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> QueueNamePrefix(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string queueNamePrefix) { }
        public static NServiceBus.S3Settings S3(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string bucketForLargeMessages, string keyPrefix) { }
        [System.Obsolete("The native delayed delivery is always enabled in version 6. The member currently " +
            "throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static void SubscriptionAuthorizer(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<NServiceBus.Pipeline.IIncomingPhysicalMessageContext, bool> authorizer) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> TopicNameGenerator(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<System.Type, string, string> topicNameGenerator) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> TopicNamePrefix(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string topicNamePrefix) { }
        [System.Obsolete("The native delayed delivery is always enabled in version 6. Use `SqsTransport.Que" +
            "ueDelay` instead. The member currently throws a NotImplementedException. Will be" +
            " removed in version 7.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> UnrestrictedDurationDelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config)
            where T : NServiceBus.SqsTransport { }
    }
}
namespace NServiceBus.Transport.SQS.Configure
{
    public class SqsSubscriptionMigrationModeSettings : NServiceBus.SubscriptionMigrationModeSettings
    {
        public NServiceBus.SubscriptionMigrationModeSettings MessageVisibilityTimeout(int timeoutInSeconds) { }
        public NServiceBus.SubscriptionMigrationModeSettings SubscriptionsCacheTTL(System.TimeSpan ttl) { }
        public NServiceBus.Transport.SQS.Configure.SqsSubscriptionMigrationModeSettings TopicCacheTTL(System.TimeSpan ttl) { }
    }
}