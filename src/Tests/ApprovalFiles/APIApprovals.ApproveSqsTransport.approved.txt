[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public class S3Settings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        public void ClientFactory(System.Func<Amazon.S3.IAmazonS3> factory) { }
        public void ServerSideCustomerEncryption(Amazon.S3.ServerSideEncryptionCustomerMethod encryptionMethod, string providedKey, string providedKeyMD5 = null) { }
        public void ServerSideEncryption(Amazon.S3.ServerSideEncryptionMethod encryptionMethod, string keyManagementServiceKeyId = null) { }
    }
    [System.ObsoleteAttribute("Use `transport.ClientFactory(() => new AmazonSqsClient(customConfig))` instead. W" +
        "ill be removed in version 5.0.0.", true)]
    public enum SqsCredentialSource
    {
        EnvironmentVariables = 0,
        InstanceProfile = 1,
    }
    public class SqsTransport : NServiceBus.Transport.TransportDefinition, NServiceBus.Routing.IMessageDrivenSubscriptionTransport
    {
        public SqsTransport() { }
        public override string ExampleConnectionStringForErrorMessage { get; }
        public override bool RequiresConnectionString { get; }
        public override NServiceBus.Transport.TransportInfrastructure Initialize(NServiceBus.Settings.SettingsHolder settings, string connectionString) { }
    }
    public class static SqsTransportSettings
    {
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> ClientFactory(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.Func<Amazon.SQS.IAmazonSQS> factory) { }
        [System.ObsoleteAttribute("Use `transport.ClientFactory(() => new AmazonSqsClient(customConfig))` instead. T" +
            "he member currently throws a NotImplementedException. Will be removed in version" +
            " 5.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> CredentialSource(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, NServiceBus.SqsCredentialSource credentialSource) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> EnableV1CompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
        [System.ObsoleteAttribute("Use `MaxTimeToLive` instead. The member currently throws a NotImplementedExceptio" +
            "n. Will be removed in version 5.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> MaxTTLDays(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, int maxTtlDays) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> MaxTimeToLive(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, System.TimeSpan maxTimeToLive) { }
        [System.ObsoleteAttribute("This API is no longer needed because SQS is always used to delay messages. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 5.0." +
            "0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> NativeDeferral(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, bool use = True) { }
        [System.ObsoleteAttribute("Use `transport.ClientFactory(() => new AmazonSQSClient(new AmazonSQSConfig { Prox" +
            "yHost = host, ProxyPort = port }))` instead. The member currently throws a NotIm" +
            "plementedException. Will be removed in version 5.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> Proxy(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string proxyHost, int proxyPort) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> QueueNamePrefix(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string queueNamePrefix) { }
        [System.ObsoleteAttribute("Use `transport.ClientFactory(() => new AmazonSQSClient(new AmazonSQSConfig { Regi" +
            "onEndpoint = region }))` instead. The member currently throws a NotImplementedEx" +
            "ception. Will be removed in version 5.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> Region(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string region) { }
        public static NServiceBus.S3Settings S3(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string bucketForLargeMessages, string keyPrefix) { }
        [System.ObsoleteAttribute("Use `transport.S3(string bucketForLargeMessages, string keyPrefix)` instead. The " +
            "member currently throws a NotImplementedException. Will be removed in version 5." +
            "0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> S3BucketForLargeMessages(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions, string s3BucketForLargeMessages, string s3KeyPrefix) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqsTransport> UnrestrictedDurationDelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.SqsTransport> transportExtensions) { }
    }
}